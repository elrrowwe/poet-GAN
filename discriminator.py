"""
This file contains the discriminator part of the network.

The discriminator accepts the output of the generator/an image and outputs a probability within the range [0, 1] of the image having been 
drawn from the data, rather than generated by the generator. 
"""

import torch.nn as nn

class Discriminator(nn.Module):
    def __init__(self, input_channels:int=1, conv1_channels: int=64, device: str='cpu'):
        """
        The constructor of the Discriminator part of the network.
        
        input_channels: the number of channels in the input. defaults to 1
        conv1_channels: the number of channels in the output of the first conv layer. defaults to 64
        device: the device to perform the calculations on. defaults to 'cpu'
        """ 
        super(Discriminator, self).__init__()

        self.input_channels = input_channels
        self.conv1_channels = conv1_channels
        self.device = device

        self.lin = nn.Linear(self.conv1_channels * 2 * 4 * 4, 1, device=self.device), #the output dim is 1 for the probability D(x)
        self.sigmoid = nn.Sigmoid()

        self.D = nn.Sequential(
            nn.ConvTranspose2d(self.input_channels, self.conv1_channels, kernel_size=4, stride=2, device=self.device),
            nn.LeakyReLU(0.1, True),
        
            nn.ConvTranspose2d(self.conv1_channels, self.conv1_channels * 2, kernel_size=4, stride=2, device=self.device),
            nn.LeakyReLU(0.1, True),

        )

        def forward(self, x):
            x = self.D(x)

            x = x.view(-1, 128 * 4 * 4)
            prob_preactivation = self.lin(x)
            prob_activated = self.sigmoid(prob_preactivation)

            return prob_activated